---
description: Coding Standards
alwaysApply: true
---

# 코딩 표준

## TypeScript 규칙

### 타입 정의

- **명시적 타입**: 함수 매개변수와 반환값에 타입 명시
- **인터페이스 우선**: type보다 interface 사용 권장
- **제네릭 활용**: 재사용 가능한 타입 정의
- **strict 모드**: 엄격한 타입 체크 활성화

```typescript
// ✅ 좋은 예시
interface UserProps {
  id: string;
  name: string;
  email: string;
}

const UserComponent: React.FC<UserProps> = ({ id, name, email }) => {
  return <div>{name}</div>;
};

// ❌ 나쁜 예시
const UserComponent = ({ id, name, email }) => {
  return <div>{name}</div>;
};
```

### 네이밍 컨벤션

- **PascalCase**: 컴포넌트, 인터페이스, 타입, 클래스
- **camelCase**: 변수, 함수, 메서드
- **UPPER_SNAKE_CASE**: 상수
- **kebab-case**: 파일명

```typescript
// ✅ 좋은 예시
const UserProfile = () => {};
const getUserData = () => {};
const API_BASE_URL = 'https://api.example.com';

// ❌ 나쁜 예시
const userProfile = () => {};
const GetUserData = () => {};
const apiBaseUrl = 'https://api.example.com';
```

## React 규칙

### 컴포넌트 구조

- **함수형 컴포넌트**: 클래스 컴포넌트 대신 함수형 사용
- **Hooks 활용**: useState, useEffect 등 적절히 사용
- **Props 타입**: 명시적 타입 정의
- **조건부 렌더링**: && 연산자나 삼항 연산자 활용

```typescript
// ✅ 좋은 예시
interface ButtonProps {
  variant: 'primary' | 'secondary';
  children: React.ReactNode;
  onClick?: () => void;
}

const Button: React.FC<ButtonProps> = ({ variant, children, onClick }) => {
  return (
    <button
      className={`btn btn-${variant}`}
      onClick={onClick}
    >
      {children}
    </button>
  );
};

// ❌ 나쁜 예시
const Button = ({ variant, children, onClick }) => {
  return <button onClick={onClick}>{children}</button>;
};
```

### 이벤트 핸들링

- **명시적 타입**: 이벤트 핸들러에 적절한 타입 지정
- **인라인 함수 최소화**: 성능을 위해 useCallback 활용

```typescript
// ✅ 좋은 예시
const handleClick = useCallback((event: React.MouseEvent<HTMLButtonElement>) => {
  event.preventDefault();
  // 로직 처리
}, []);

// ❌ 나쁜 예시
<button onClick={(e) => { /* 로직 */ }}>Click</button>
```

## 스타일링 규칙

### Tailwind CSS

- **유틸리티 클래스**: Tailwind의 유틸리티 클래스 우선 사용
- **커스텀 클래스**: 반복되는 스타일은 컴포넌트로 추출
- **반응형 디자인**: 모바일 퍼스트 접근

```typescript
// ✅ 좋은 예시
<div className="flex flex-col md:flex-row gap-4 p-6">
  <div className="w-full md:w-1/2">Content</div>
</div>

// ❌ 나쁜 예시
<div style={{ display: 'flex', padding: '24px' }}>Content</div>
```

## 성능 최적화

### React 최적화

- **React.memo**: 불필요한 리렌더링 방지
- **useMemo/useCallback**: 계산 비용이 큰 작업 최적화
- **코드 스플리팅**: 동적 import 활용

### Next.js 최적화

- **이미지 최적화**: next/image 컴포넌트 사용
- **폰트 최적화**: next/font 사용
- **번들 분석**: @next/bundle-analyzer 활용

## 에러 처리

### 에러 바운더리

- **React Error Boundary**: 컴포넌트 에러 처리
- **전역 에러 핸들러**: 애플리케이션 레벨 에러 처리
